[core]

  # Use a global .gitignore file.
  excludesfile = ~/.gitignore

  # Enable parallel I/O for operations like "git diff".
  # See http://stackoverflow.com/q/18257622/276478
  preloadindex = true

  # Use 12 characters for the abbreviated commit hash. I can currently make
  # do with 10, but this should provide a certain level of safety for the
  # near-ish future. See the interesting and well-researched article at
  # http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
  abbrev = 12

  # Make `git rebase` safer on OS X.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Use Sublime Text as the default editor.
  editor = subl

  # Don't mess with line endings when checking out files, but fix files with
  # CRLF endings introduced accidentally.
  autocrlf = input

  # Don't normally care about permissions, this can be overriden per repo.
  filemode = false

[color]

  # Use colors by default when the output is a terminal that supports them.
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[help]

  # Automatically correct and execute mistyped commands.
  autocorrect = 1

[diff]

  # Use more time to create better diffs. E.g. matching opening/closing braces
  # from neighbour functions.
  algorithm = patience

  # Tells Git to detect renames. If set to "true", it will enable basic
  # rename detection. If set to "copies", it will detect copies, as well.
  renames = copies

[merge]

  # Use Kaleidoscope app for merging.
  tool = ksdiff

  # Include summaries of merged commits in newly created merge commit messages.
  log = true

[push]

  default = simple

[alias]

  # View abbreviated SHA, description, and graph of the latest 20 commits.
  l = log --graph -n 20 --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative

  # View alternative, more detailed log, description and graph of latest commits.
  ld = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative

  # Show a concise status of the working directory, along with the branch and
  # the number of commits behind and/or ahead.
  s = status --short --branch

  # Status.
  st = status

  # Switch to a branch, creating it if necessary.
  go = checkout -B

  # Like "git show myfile", but uses the last commit that changed "myfile".
  showlast = log -n 1 -p

  # When doing "git git log" or some such, do not complain about "git" not
  # being a valid Git command. This happens when copy-pasting examples, for
  # instance.
  git = !git

  # Show the staged changes.
  dc = diff --cached

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # Clone a repository including all submodules.
  c = clone --recursive

  # Commit.
  ci = commit

  # Commit all changes.
  ca = !git add -A && git commit -av

  # Show verbose output about tags, branches or remotes.
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit.
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit.
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # Remove branches that have already been merged with master (delete merged).
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
