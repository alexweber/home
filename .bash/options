#!/usr/bin/env bash

# Case-insensitive globbing.
shopt -s nocaseglob;

# Include filenames beginning with a "." in the filename expansion
shopt -s dotglob;

# Do not autocomplete when accidentally pressing Tab on an empty line. (It takes
# forever and yields "Display all 15 gazillion possibilites?")
shopt -s no_empty_cmd_completion;

# Save all lines of a multiple-line command in the same history entry
shopt -s cmdhist;

# Append to the Bash history file, rather than overwriting it.
shopt -s histappend;

# Autocorrect typos in path names when using `cd`.
shopt -s cdspell;

# Do not overwrite files when redirecting using ">".
# Note that you can still override this with ">|".
#set -o noclobber;

# When the command contains an invalid history operation (for instance when
# using an unescaped "!" (I get that a lot in quick e-mails and commit
# messages) or a failed substitution (e.g. "^foo^bar" when there was no "foo"
# in the previous command line), do not throw away the command line, but let me
# correct it.
shopt -s histreedit;

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
  shopt -s "$option" 2> /dev/null;
done;

# Add tab completion for many Bash commands.
if [ -f $(brew --prefix)/share/bash-completion/bash_completion ]; then
  . $(brew --prefix)/share/bash-completion/bash_completion
fi

# Enable tab completion for `g` by marking it as an alias for `git`.
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
  complete -o default -o nospace -F _git g;
fi;

# If we have found drush.complete.sh, then source it.
if [ -f "$HOME/.composer/vendor/drush/drush/drush.complete.sh" ] ; then
  source "$HOME/.composer/vendor/drush/drush/drush.complete.sh"
fi

# Completion for Homebrew.
source `brew --repository`/Library/Contributions/brew_bash_completion.sh

# Completion for WP CLI.
source "$HOME/.init/wp-completion.sh"

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards.
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2 | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`.
# You could just use `-g` instead, but I like being explicit.
complete -W "NSGlobalDomain" defaults;

# Use solarized dircolors if available
if command -v dircolors > /dev/null; then
  [[ -e $HOME/dircolors ]] && eval `dircolors $HOME/dircolors`;
fi;
